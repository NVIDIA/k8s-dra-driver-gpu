# Copyright 2024 NVIDIA CORPORATION
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.namespace }}
{{- $error := "" }}
{{- $error = printf "%s\nValue 'namespace' set to %s" $error .Values.namespace }}
{{- $error = printf "%s\nSetting an explicit 'namespace' in values.yaml or via --set on the command line is no longer supported." $error }}
{{- $error = printf "%s\nUse --namespace (with --create-namespace as necessary) instead." $error }}
{{- $error = printf "%s\nSee: https://helm.sh/docs/helm/helm_install/#options" $error }}
{{- fail $error }}
{{- end }}

{{- if and (eq (include "nvidia-dra-driver-gpu.namespace" .) "default") ( eq .Values.namespaceOverride "") (not .Values.allowDefaultNamespace) }}
{{- $error := "" }}
{{- $error = printf "%s\nRunning in the 'default' namespace is not recommended." $error }}
{{- $error = printf "%s\nSet 'allowDefaultNamespace=true' to bypass this error." $error }}
{{- $error = printf "%s\nOtherwise, use --namespace (with --create-namespace as necessary) to run in a specific namespace." $error }}
{{- $error = printf "%s\nSee: https://helm.sh/docs/helm/helm_install/#options" $error }}
{{- fail $error }}
{{- end }}

{{- if .Values.nvidiaCtkPath }}
{{- $error := "" }}
{{- $error = printf "%s\nSetting a user-defined nvidiaCtkPath is no longer supported. It can simply be removed without consequence." $error }}
{{- $error = printf "%s\nIt was previously required to point the DRA driver at the host-path to the nvidia-ctk binary." $error }}
{{- $error = printf "%s\nThis, in turn, was used to execute any CDI hooks injected into containers by the DRA driver." $error }}
{{- $error = printf "%s\nNow a diffent binary is used called nvidia-cdi-hook that is installed by the DRA driver itself." $error }}
{{- $error = printf "%s\nThis renders the need for passing this user-defined flag obsolete." $error }}
{{- fail $error }}
{{- end }}

{{- if .Values.webhook.enabled }}
{{- if not .Values.webhook.tls }}
{{- $error := "" }}
{{- $error = printf "%s\nWebhook TLS configuration is required when webhook is enabled." $error }}
{{- $error = printf "%s\nPlease configure webhook.tls.mode and related settings." $error }}
{{- fail $error }}
{{- end }}

{{- if not .Values.webhook.tls.mode }}
{{- $error := "" }}
{{- $error = printf "%s\nWebhook TLS mode is required when webhook is enabled." $error }}
{{- $error = printf "%s\nSet webhook.tls.mode to either 'cert-manager' or 'secret'." $error }}
{{- fail $error }}
{{- end }}

{{- if not (or (eq .Values.webhook.tls.mode "cert-manager") (eq .Values.webhook.tls.mode "secret")) }}
{{- $error := "" }}
{{- $error = printf "%s\nInvalid webhook TLS mode: %s" $error .Values.webhook.tls.mode }}
{{- $error = printf "%s\nWebhook TLS mode must be either 'cert-manager' or 'secret'." $error }}
{{- fail $error }}
{{- end }}

{{- if eq .Values.webhook.tls.mode "cert-manager" }}
{{- if not .Values.webhook.tls.certManager }}
{{- $error := "" }}
{{- $error = printf "%s\nCert-manager configuration is required when using cert-manager mode." $error }}
{{- $error = printf "%s\nPlease configure webhook.tls.certManager settings." $error }}
{{- fail $error }}
{{- end }}

{{- if not .Values.webhook.tls.certManager.issuerType }}
{{- $error := "" }}
{{- $error = printf "%s\nCert-manager issuer type is required when using cert-manager mode." $error }}
{{- $error = printf "%s\nSet webhook.tls.certManager.issuerType to 'selfsigned', 'clusterissuer', or 'issuer'." $error }}
{{- fail $error }}
{{- end }}

{{- if not (or (eq .Values.webhook.tls.certManager.issuerType "selfsigned") (eq .Values.webhook.tls.certManager.issuerType "clusterissuer") (eq .Values.webhook.tls.certManager.issuerType "issuer")) }}
{{- $error := "" }}
{{- $error = printf "%s\nInvalid cert-manager issuer type: %s" $error .Values.webhook.tls.certManager.issuerType }}
{{- $error = printf "%s\nIssuer type must be 'selfsigned', 'clusterissuer', or 'issuer'." $error }}
{{- fail $error }}
{{- end }}

{{- if and (ne .Values.webhook.tls.certManager.issuerType "selfsigned") (not .Values.webhook.tls.certManager.issuerName) }}
{{- $error := "" }}
{{- $error = printf "%s\nCert-manager issuer name is required when issuer type is not 'selfsigned'." $error }}
{{- $error = printf "%s\nSet webhook.tls.certManager.issuerName to the name of your issuer." $error }}
{{- fail $error }}
{{- end }}
{{- end }}

{{- if eq .Values.webhook.tls.mode "secret" }}
{{- if not .Values.webhook.tls.secret }}
{{- $error := "" }}
{{- $error = printf "%s\nSecret configuration is required when using secret mode." $error }}
{{- $error = printf "%s\nPlease configure webhook.tls.secret settings." $error }}
{{- fail $error }}
{{- end }}

{{- if not .Values.webhook.tls.secret.name }}
{{- $error := "" }}
{{- $error = printf "%s\nSecret name is required when using secret mode." $error }}
{{- $error = printf "%s\nSet webhook.tls.secret.name to the name of your TLS secret." $error }}
{{- fail $error }}
{{- end }}
{{- end }}
{{- end }}
