# Copyright 2023 NVIDIA CORPORATION
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for k8s-dra-driver-gpu.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Specify the driver root on the host.
# If the NVIDIA GPU driver is managed using the NVIDIA GPU Driver Container,
# this is typically /run/nvidia/driver.
# For driver installed directly on a host, a value of `/` is used.
nvidiaDriverRoot: /

# Optional path to the nvidia-cdi-hook executable.
# If not specified, the default path inferred from the nvidia-container-toolkit library version will be used.
nvidiaCDIHookPath: ""

nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
selectorLabelsOverride: {}
gpuResourcesEnabledOverride: false

allowDefaultNamespace: false

imagePullSecrets: []
image:
  repository: nvcr.io/nvidia/k8s-dra-driver-gpu
  pullPolicy: IfNotPresent
  # Note: an empty string is translated to the `appVersion` string from
  # the Helm chart YAML (effectively implementing the default value to be
  # the current version). Also note that a "v" is prefixed to the
  # `appVersion` value.
  tag: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

resources:
  gpus:
    enabled: true
  computeDomains:
    enabled: true

# Feature gates configuration following Kubernetes patterns
# Configure feature gates as key-value pairs (feature_name: true/false)
# Examples:
# featureGates:
#   ExampleFeature: false              # Project-specific alpha feature
#   ContextualLogging: true            # Kubernetes logging feature (enabled by default)
#   LoggingAlphaOptions: false         # Kubernetes logging alpha features
#   LoggingBetaOptions: true           # Kubernetes logging beta features
featureGates: {}

# Log verbosity for all components. Zero or greater, higher number means higher
# verbosity. Regardless of this setting, messages of type Error, Warning, and
# Info(level 0) are always logged. Can also be set for individual components via
# environment variable (that takes precedence), see
# https://github.com/NVIDIA/k8s-dra-driver-gpu/wiki/Troubleshooting#controlling-log-verbosity
#
# An (incomplete) representation of which types of messages to expect with
# increasing verbosity level:
#
# Level 0:
# - Configuration detail (during process startup)
# - Kubelet plugins:
#   - Permanent errors during device Prepare() and Unprepare()
#
# Level 1:
# - CD controller:
#   - Confirm cleanup of stale objects
# - k8s client-go: feature gates
# - Kubelet plugins:
#   - Device (un)prepare confirmation, with resource claim UID
#   - Workqueue reconciliation failures (noisy: mainly expected, retryable
#     errors)
# - CD daemon:
#   - explicit 'wait for nodes update'
#
# Level 2:
# - reflector.go informer state: "Caches populated"
# - Kubelet plugins:
#   - Acknowledge when Unprepare is a noop
# - CD controller:
#   - Added/updated API object callback confirmation
#
# Level 3:
# - reflector.go informer state: "Listing and watching"
#
# Level 6:
# - round_trippers.go output (API server request/response detail)
# - Kubelet plugins:
#   - GRPC request/response detail
#   - Checkpoint file update confirmation
# - CD daemon:
#   - explicit 'IP set did not change'
#
# Level 7:
# - Kubelet plugins:
#   - Health check
logVerbosity: "4"

# Webhook configuration
webhook:
  enabled: false
  replicas: 1
  servicePort: 443
  containerPort: 443
  priorityClassName: "system-cluster-critical"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: "100%"
  podAnnotations: {}
  podSecurityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  containers:
    webhook:
      securityContext:
        privileged: false
      resources: {}
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    name: ""
  # failurePolicy defines how the API server should handle requests if the webhook call fails.
  # Options:
  #   - Fail   : reject the request if the webhook call fails either due to cert errors, timeout or if the service is unreachable.
  #   - Ignore : allow the request to continue if the webhook call fails.
  failurePolicy: Fail
  # TLS certificate configuration
  tls:
    # Certificate management mode: "cert-manager" or "secret"
    # - "cert-manager": Use cert-manager to automatically generate and manage certificates
    # - "secret": Use a user-provided secret containing tls.crt and tls.key
    mode: "cert-manager"
    certManager:
      # Issuer type: "selfsigned", "clusterissuer", or "issuer"
      issuerType: "selfsigned"
      # Issuer name (required when issuerType is "clusterissuer" or "issuer")
      issuerName: ""
      # Additional DNS names for the certificate
      dnsNames: []
    secret:
      # Name of the secret containing tls.crt and tls.key
      name: ""
      # Base64-encoded CA certificate bundle for validating the webhook's TLS certificate (base64 encoded)
      # Required when using secret mode.
      # Note: Only include intermediate CA certificates, not root CA certificates
      caBundle: ""

controller:
  priorityClassName: "system-node-critical"
  podAnnotations: {}
  podSecurityContext: {}
  nodeSelector: {}
  tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  containers:
    computeDomain:
      securityContext: {}
      env: []
      resources: {}
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "node-role.kubernetes.io/control-plane"
            operator: "Exists"

kubeletPlugin:
  priorityClassName: "system-node-critical"
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: "100%"
  podAnnotations: {}
  podSecurityContext: {}
  nodeSelector: {}
  tolerations: []
  kubeletRegistrarDirectoryPath: /var/lib/kubelet/plugins_registry
  kubeletPluginsDirectoryPath: /var/lib/kubelet/plugins
  containers:
    init:
      securityContext: {}
      resources: {}
    computeDomains:
      env: []
      securityContext:
        privileged: true
      resources: {}
      # Port running a gRPC health service checked by a livenessProbe.
      # Set to a negative value to disable the service and the probe.
      healthcheckPort: 51515
    gpus:
      env: []
      securityContext:
        privileged: true
      resources: {}
      # Port running a gRPC health service checked by a livenessProbe.
      # Set to a negative value to disable the service and the probe.
      healthcheckPort: 51516
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          # On discrete-GPU based systems NFD adds the following label where 10de is the NVIDIA PCI vendor ID
          - key: feature.node.kubernetes.io/pci-10de.present
            operator: In
            values:
            - "true"
        - matchExpressions:
          # On some Tegra-based systems NFD detects the CPU vendor ID as NVIDIA
          - key: feature.node.kubernetes.io/cpu-model.vendor_id
            operator: In
            values:
            - "NVIDIA"
        - matchExpressions:
          # We allow a GPU deployment to be forced by setting the following label to "true"
          - key: "nvidia.com/gpu.present"
            operator: In
            values:
            - "true"
